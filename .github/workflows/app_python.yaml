name: Python web application

on:
  push:
    branches: [ master, github-actions ]

env:
  APP_PATH: ./app_python  # source root
  CODE: app tests  # packages with source code (inside source root)
  TESTS: tests  # package with tests (inside source root)
  IMAGE_NAME: devops-python-app  # name for Docker image

jobs:

  lint_test:  # Run linters and test application
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.APP_PATH }}

    env:
      POETRY_VERSION: 1.1.8

    steps:
    - name: Checkout Github repository
      uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v2
      with:
        path: ~/.local
        key: poetry_v7-${{ env.POETRY_VERSION }}
    - name: Install Poetry
      uses: snok/install-poetry@v1.1.8
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
      if: steps.cached-poetry.outputs.cache-hit != 'true'
    - name: Debug info
      run:
        echo ${{ env.APP_PATH }}/.venv
        which python
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: ${{ env.APP_PATH }}/.venv
        key: poetry_venv_v7-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root
        poetry run mypy --install-types --namespace-packages --explicit-package-bases --non-interactive ${{ env.CODE }}
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    - name: Check codestyle
      run: |
        poetry run isort --diff --check-only --settings-path pyproject.toml ${{ env.CODE }}
        poetry run black --diff --check --config pyproject.toml ${{ env.CODE }}
        poetry run darglint --verbosity 2 ${{ env.CODE }}
    - name: Run linters
      run: |
        poetry run pylint --rcfile=.pylintrc ${{ env.CODE }}
        poetry run mypy --config-file pyproject.toml --namespace-packages --explicit-package-bases ${{ env.CODE }}
    - name: Check safety
      run: |
        poetry check 
        poetry run safety check --full-report
        poetry run bandit -s B101 --recursive ${{ env.CODE }}
    - name: Run tests
      run: |
        poetry run python -m pytest --cov=app ${{ env.TESTS }}
  
  build:  # Build docker image and push it to Dockerhub
    needs: lint_test
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/master'

    defaults:
      run:
        working-directory: ./app_python

    steps:
    - name: Checkout Github repository
      uses: actions/checkout@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ${{ env.APP_PATH }}
        file: ${{ env.APP_PATH }}/docker/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

name: Python web application

on: [push]

jobs:
  lint_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app_python
    env:
      CODE: app tests
      TESTS: tests

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.1.8
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root
        poetry run mypy --install-types --namespace-packages --explicit-package-bases --non-interactive ${{ env.CODE }}
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    - name: Check codestyle
      run: |
        poetry run isort --diff --check-only --settings-path pyproject.toml ${{ env.CODE }}
        poetry run black --diff --check --config pyproject.toml ${{ env.CODE }}
        poetry run darglint --verbosity 2 ${{ env.CODE }}
    - name: Run linters
      run: |
        poetry run pylint --rcfile=.pylintrc ${{ env.CODE }}
        poetry run mypy --config-file pyproject.toml --namespace-packages --explicit-package-bases ${{ env.CODE }}
    - name: Check safety
      run: |
        poetry check 
        poetry run safety check --full-report
        poetry run bandit -s B101 --recursive ${{ env.CODE }}
    - name: Run tests
      run: |
        poetry run python -m pytest --cov=app ${{ env.TESTS }}
